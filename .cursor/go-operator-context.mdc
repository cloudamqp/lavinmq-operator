---
description: 
globs: 
alwaysApply: true
---
# Rule: Go Kubernetes Operator Development (Operator SDK)

When assisting with Go code for a Kubernetes operator built using the Operator SDK (https://sdk.operatorframework.io/):

1.  **Adhere to Idiomatic Go:** Follow standard Go best practices and conventions (refer to "Effective Go" and "Go Code Review Comments"). Ensure code is formatted with `gofmt`/`goimports`. Use clear and descriptive naming for variables, functions, types, and packages.
2.  **Prioritize Simplicity and Readability:** Write code that is easy for humans to read, understand, and maintain. Avoid unnecessary complexity or overly clever solutions. Keep functions short and focused on a single responsibility. Use comments judiciously to explain *why* something is done, not *what* it does (the code should explain the *what*).
3.  **Design for Testability:** Structure code to be easily unit-testable.
    * Favor pure functions where possible.
    * Use interfaces to abstract external dependencies (like the Kubernetes client `client.Client`, external services, or time), allowing for easy mocking or faking in tests.
    * Minimize side effects within functions; push side effects towards the outer layers (e.g., the main Reconcile function).
4.  **Generate Unit Tests with Ginkgo/Gomega:** For *every* significant function or method you generate or modify (especially business logic within the controller), *also* provide comprehensive unit tests using the **Ginkgo v2** and **Gomega** frameworks, as commonly used in `operator-sdk` projects.
    * Structure tests using `Describe` and `Context` blocks for organisation and `It` blocks for individual specifications.
    * Use `BeforeEach` and `AfterEach` for setup and teardown logic.
    * Employ Gomega matchers (e.g., `Expect(...).To(Equal(...))`, `Expect(...).To(HaveOccurred())`, `Expect(...).NotTo(HaveOccurred())`, `Expect(...).To(MatchError(...))`, `Expect(...).To(BeNil())`) for expressive assertions.
    * Ensure tests cover success paths, edge cases, and error conditions.
    * Use appropriate fakes (like `sigs.k8s.io/controller-runtime/pkg/client/fake`) or mocks for dependencies (especially the Kubernetes client interface).
5.  **Operator SDK & Controller Runtime Conventions:**
    * Be mindful of standard patterns used in the Operator SDK and controller-runtime, particularly within the `Reconcile` method.
    * Handle errors gracefully, returning appropriate `ctrl.Result` values and errors to manage requeue logic.
    * Use structured logging via `logr` provided by controller-runtime for informative logs.
    * When interacting with Kubernetes API objects, always check for potential `nil` pointers and handle API errors correctly.

---

### Example Ginkgo/Gomega Test Structure

```go
package mypackage_test // Use _test package convention

import (
	// Standard library imports
	"context"
	"fmt"

	// Third-party imports
	. "[github.com/onsi/ginkgo/v2](mdc:https:/www.google.com/search?q=https:/github.com/onsi/ginkgo/v2)" // Dot import for Ginkgo DSL
	. "[github.com/onsi/gomega](mdc:https:/github.com/onsi/gomega)"    // Dot import for Gomega matchers
	// "sigs.k8s.io/controller-runtime/pkg/client/fake" // Example: Fake client
	// metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"      // Example: K8s types
	// "k8s.io/apimachinery/pkg/runtime"                 // Example: Scheme

	// Package under test
	"your_module/path/to/your/package" // Adjust this path
)

var _ = Describe("MyFunction or MyMethod", func() {
	// Declare variables needed across tests in this Describe block
	var (
		ctx context.Context
		// Example: inputArg mypackage.InputType
		// Example: mockClient client.Client
		// Example: reconciler *mypackage.MyReconciler // If testing a method
	)

	// Setup before each test within this Describe or nested Context blocks
	BeforeEach(func() {
		ctx = context.Background()
		// Initialize variables, create mocks/fakes
		// Example: inputArg = mypackage.InputType{ /* ... */ }
		// Example: scheme := runtime.NewScheme()
		// Example: mypackagev1.AddToScheme(scheme) // Add your types
		// Example: mockClient = fake.NewClientBuilder().WithScheme(scheme).Build()
		// Example: reconciler = &mypackage.MyReconciler{Client: mockClient, Log: logr.Discard()}
	})

	// Group related tests with Context
	Context("when the input is valid", func() {
		// Define specific setup for this context if needed
		BeforeEach(func() {
			// e.g., ensure specific conditions are met for valid input scenario
		})

		// Individual test case
		It("should return the expected result and no error", func() {
			// Call the function or method under test
			result, err := mypackage.MyFunction(ctx /*, inputArg, mockClient */)
			// Or: result, err := reconciler.MyMethod(ctx, /* ... */)

			// Assertions using Gomega
			Expect(err).NotTo(HaveOccurred()) // Check for no error
			Expect(result).NotTo(BeNil())      // Example: Check result isn't nil
			Expect(result.SomeField).To(Equal("expectedValue")) // Check specific fields
			// Add more assertions as needed
		})
	})

	Context("when an error condition occurs", func() {
		BeforeEach(func() {
			// Setup conditions that should lead to an error
			// Example: Configure mockClient to return an error on Get/List/Update etc.
		})

		It("should return an appropriate error", func() {
			_, err := mypackage.MyFunction(ctx /*, inputArg, mockClient */)
			// Or: _, err := reconciler.MyMethod(ctx, /* ... */)

			// Assertions
			Expect(err).To(HaveOccurred()) // Check an error was returned
			// Optional: Check for a specific error type or message
			Expect(err).To(MatchError(ContainSubstring("specific error detail")))
			// Or: Expect(err).To(BeAssignableToTypeOf(mypackage.SpecificErrorType{}))
		})
	})

	// Add more Context blocks for different scenarios (edge cases, other inputs)
	// Add more It blocks for specific behaviors within those contexts
})

// Note: You'll also need the standard Ginkgo test runner setup,
// usually in a <package_name>_suite_test.go file, which operator-sdk
// often generates for you:
/*
package mypackage_test

import (
	"testing"

	. "[github.com/onsi/ginkgo/v2](mdc:https:/www.google.com/search?q=https:/github.com/onsi/ginkgo/v2)"
	. "[github.com/onsi/gomega](mdc:https:/github.com/onsi/gomega)"
)

func TestMyPackage(t *testing.T) {
	RegisterFailHandler(Fail)
	RunSpecs(t, "MyPackage Suite")
}
*/